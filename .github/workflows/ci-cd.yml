name: CI/CD - Atlantico DemoDay (Backend + Frontend)

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_USER: nilsonmazurchi
  SERVICE_NAME: atlantico-demoday
  IMAGE_NAME: ${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}

jobs:

  lint:
    name: Lint (Java & Angular)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lint Backend (Maven Checkstyle if configured)
        working-directory: Backend
        run: |
          echo "Lint backend (skipping if not configured)"
          # Se houver plugin maven-checkstyle-plugin configurado, descomente:
          # mvn -B -q -e checkstyle:check

      - name: Setup Node (for frontend linters)
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Lint Frontend (Angular)
        working-directory: Frontend
        run: |
          echo "Installing front-end deps..."
          npm ci
          echo "Running lint..."
          npm run lint || true

  test:
    name: Tests (Java + Angular)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Run backend tests (Maven)
        working-directory: Backend
        run: |
          mvn -B -DskipTests=false test

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Run frontend tests
        working-directory: Frontend
        run: |
          npm ci
          npm test -- --watch=false || true

  build-backend:
    name: Build Backend (Jar)
    runs-on: ubuntu-latest
    needs: test
    outputs:
      backend_jar_path: ${{ steps.set-output.outputs.backend_jar }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build with Maven
        working-directory: Backend
        run: |
          mvn -B -DskipTests package
          echo "backend-jar=$(ls Backend/target/*.jar | head -n1)" >> $GITHUB_OUTPUT
      - name: set-output
        id: set-output
        run: echo "backend_jar=$(ls Backend/target/*.jar | head -n1)" >> $GITHUB_OUTPUT

  build-frontend:
    name: Build Frontend (Angular)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install & Build Angular
        working-directory: Frontend
        run: |
          npm ci
          npm run build -- --output-path=dist --configuration=production

      - name: Copy built frontend to backend resources (optional)
        if: always()
        run: |
          # Se desejar empacotar frontend no JAR backend (opcional), copie para Backend/src/main/resources/static
          mkdir -p Backend/src/main/resources/static
          rm -rf Backend/src/main/resources/static/*
          cp -r Frontend/dist/* Backend/src/main/resources/static/ || echo "Nenhum build frontend encontrado"

  build-and-push:
    name: Build and Push Docker Image
    needs:
      - build-backend
      - build-frontend
    runs-on: ubuntu-latest
    outputs:
      docker_image_name: ${{ steps.set-outputs.outputs.docker_image_name }}
      docker_image_tag: ${{ steps.set-outputs.outputs.docker_image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          file: Backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:1.0.${{ github.run_id }}
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set outputs
        id: set-outputs
        run: |
          echo "docker_image_name=${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "docker_image_tag=1.0.${{ github.run_id }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Koyeb
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

      - name: Terraform validate
        run: terraform -chdir=infra validate

      - name: Terraform apply
        run: terraform -chdir=infra apply -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
          TF_VAR_docker_image_name: ${{ needs.build-and-push.outputs.docker_image_name }}
          TF_VAR_docker_image_tag: ${{ needs.build-and-push.outputs.docker_image_tag }}

  destroy:
    name: Destroy Koyeb staging
    runs-on: ubuntu-latest
    needs: deploy
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

      - name: Terraform destroy
        run: terraform -chdir=infra destroy -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
