name: CI/CD - Atlantico DemoDay (Full Stack Unificado)

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_USER: nilsonmazurchi
  IMAGE_NAME: nilsonmazurchi/atlantico-demoday

jobs:

  lint:
    name: Lint (Java + Angular)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Backend Lint (Checkstyle - opcional)
        working-directory: Backend
        run: |
          echo "Lint backend (se configurado)"
          # mvn checkstyle:check || true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Frontend Lint
        working-directory: Frontend
        run: |
          npm ci
          npm run lint || true

  test:
    name: Testes (Java + Angular)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Testar Backend (Maven)
        working-directory: Backend
        run: mvn test -DskipTests=false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Testar Frontend
        working-directory: Frontend
        run: |
          npm ci
          npm test -- --watch=false || true

  build-and-push:
    name: Build & Push Docker Image (Full Stack)
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and Push unified Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:1.0.${{ github.run_id }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Koyeb
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

      - name: Terraform Validate
        run: terraform -chdir=infra validate

      - name: Terraform Apply
        run: terraform -chdir=infra apply -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
          TF_VAR_docker_image_name: ${{ env.IMAGE_NAME }}
          TF_VAR_docker_image_tag: 1.0.${{ github.run_id }}


  # destroy:
  #   name: Destroy Koyeb staging
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   environment: staging
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3

  #     - name: Terraform init
  #       run: terraform -chdir=infra init
  #       env:
  #         KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

  #     - name: Terraform destroy
  #       run: terraform -chdir=infra destroy -auto-approve
  #       env:
  #         KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
